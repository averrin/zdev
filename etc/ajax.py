from dajax.core import Dajax
from dajaxice.decorators import dajaxice_register
from ddl.views import utmGet, connectUTM
from urlparse import parse_qs
# import simplejson


@dajaxice_register
def get_tables(request, base):
    """
        Return Dajax json for tables of selected database
    """
    dajax = Dajax()
    tables = []
    try:
        _tables = utmGet('show tables in %s' % base)
        for table in _tables:
            tables.append(table.values()[0])
    except:
        pass
    out = "<option>---</option>"
    if tables:
        for table in tables:
            out += "<option value='%s'>%s</option>" % (table, table)

    dajax.assign('#table_name', 'innerHTML', out)
    return dajax.json()


@dajaxice_register
def get_fields(request, base, table):
    """
        Return Dajax json for fields of selected table
    """
    dajax = Dajax()
    query = """
            SELECT
                group_concat(column_name) AS cols
            FROM
                information_schema.COLUMNS
            WHERE
                table_schema='%s'
                AND table_name = '%s'""" % (base, table)
    fields = utmGet(query)[0]
    fields = fields['cols'].split(',')

    out = ""
    if fields:
        for field in fields:
            out += "<option value='%s'>%s</option>" % (field, field)

    dajax.assign('#fields_ins', 'innerHTML', out)
    dajax.assign('#fields_upd', 'innerHTML', out)
    return dajax.json()


@dajaxice_register
def get_query(request, form):
    """
        Return Dajax json for query generated by f_get_merge_script
    """
    dajax = Dajax()
    form = parse_qs(form, True)
    db = connectUTM(request.user)
    cursor = db.cursor()
    cursor.callproc('p_get_merge_script', ('%s.%s' % (form['db_name'][0], form['table_name'][0]),
        ','.join(form['fields_ins']),
        ','.join(form['fields_upd']),
        form['where'][0].replace("'", '"'),
        form['db_name_target'][0]))
    # return simplejson.dumps(query)
    query = cursor.fetchall()
    return simplejson.dumps(query)
    dajax.assign('#output', 'innerHTML', query)
    dajax.remove_css_class('#output', 'hidden')
    return dajax.json()
